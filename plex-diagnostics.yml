---
- name: Plex Media Server Diagnostics
  hosts: all
  become: true
  tasks:
    - name: Check if mount point exists
      ansible.builtin.stat:
        path: /mnt/MediaStorage
      register: mount_point

    - name: Check if mount is active
      ansible.builtin.shell: mount | grep "/mnt/MediaStorage"
      register: mount_active
      failed_when: false
      changed_when: false

    - name: Check Movies directory exists
      ansible.builtin.stat:
        path: /mnt/MediaStorage/Movies
      register: movies_dir

    - name: List contents of Movies directory
      ansible.builtin.shell: ls -la /mnt/MediaStorage/Movies
      register: movies_contents
      failed_when: false
      changed_when: false
      when: movies_dir.stat.exists

    - name: Check Plex service status
      ansible.builtin.service:
        name: plexmediaserver
        state: started
      register: plex_status
      check_mode: true

    - name: Check Plex user permissions
      ansible.builtin.shell: "id plex"
      register: plex_user
      failed_when: false
      changed_when: false

    - name: Check directory permissions
      ansible.builtin.shell: "ls -ld /mnt/MediaStorage /mnt/MediaStorage/Movies"
      register: dir_permissions
      failed_when: false
      changed_when: false
      when: movies_dir.stat.exists

    - name: Display diagnostic information
      ansible.builtin.debug:
        msg:
          - "Mount point exists: {{ mount_point.stat.exists }}"
          - "Mount is active: {{ mount_active.rc == 0 }}"
          - "Movies directory exists: {{ movies_dir.stat.exists if movies_dir is defined else 'No' }}"
          - "Plex service is running: {{ plex_status.changed == false }}"
          - "Plex user info: {{ plex_user.stdout if plex_user.rc == 0 else 'Not found' }}"
          - "Directory permissions: {{ dir_permissions.stdout_lines | join('\n') if dir_permissions is defined and dir_permissions.stdout_lines is defined else 'Not available' }}"
          - "Movies directory contents: {{ movies_contents.stdout_lines | join('\n') if movies_contents is defined and movies_contents.stdout_lines is defined else 'Empty or not accessible' }}"

    # Fix permissions if needed
    - name: Fix permissions on media directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        recurse: no  # Don't recurse to avoid long execution
      loop:
        - /mnt/MediaStorage
        - /mnt/MediaStorage/Movies
        - "/mnt/MediaStorage/TV Shows"
        - /mnt/MediaStorage/Music
        - /mnt/MediaStorage/cam
      when: movies_dir.stat.exists

    - name: Ensure Plex can read the directories
      ansible.builtin.shell: "setfacl -m u:plex:rx /mnt/MediaStorage /mnt/MediaStorage/Movies"
      failed_when: false
      changed_when: true
      when: movies_dir.stat.exists

    - name: Restart Plex service
      ansible.builtin.service:
        name: plexmediaserver
        state: restarted
      when: plex_status.changed == false  # Only if Plex is running
